use Mix.Config

# For production, we often load configuration from external
# sources, such as your system environment. For this reason,
# you won't find the :http configuration below, but set inside
# ConciergeSite.Endpoint.load_from_system_env/1 dynamically.
# Any dynamic configuration should be moved to such function.
#
# Don't forget to configure the url host to something meaningful,
# Phoenix uses this information when generating URLs.
#
# Finally, we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the mix phoenix.digest task
# which you typically run after static files are built.
config :concierge_site, ConciergeSite.Endpoint,
  cache_static_manifest: "priv/static/cache_manifest.json",
  http: [port: 4000],
  url: [host: "${HOST_URL}", port: 80],
  secret_key_base: "${SECRET_KEY_BASE}",
  server: true,
  root: ".",
  version: Application.spec(:concierge_site, :vsn)

config :concierge_site, :redirect_http?, true

# Do not print debug messages in production
config :logger,
  level: :info,
  truncate: :infinity,
  backends: [:console]

config :logger, :console,
  level: :info,
  format: "$dateT$time [$level]$levelpad node=$node $metadata$message\n",
  metadata: [:request_id, :ip]

config :ehmon, :report_mf, {:ehmon, :info_report}

config :concierge_site, ConciergeSite.Dissemination.Mailer,
  adapter: Bamboo.SMTPAdapter,
  server: "email-smtp.us-east-1.amazonaws.com",
  port: 587,
  # can be `:always` or `:never`
  tls: :always,
  # can be `true`
  ssl: false,
  retries: 3,
  username: "${SMTP_USERNAME}",
  password: "${SMTP_PASSWORD}"

# Load css as a static file
config :concierge_site, load_css?: true

config :concierge_site, ConciergeSite.ViewHelpers,
  google_tag_manager_id: "${GOOGLE_TAG_MANAGER_ID}"

# Mailchimp
config :concierge_site, mailchimp_api_client: HTTPoison

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :concierge_site, ConciergeSite.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [:inet6,
#               port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :concierge_site, ConciergeSite.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
# config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
# config :concierge_site, ConciergeSite.Endpoint, server: true
#
